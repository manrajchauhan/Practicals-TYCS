# -*- coding: utf-8 -*-
"""AI Practical 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k6cugmVYU-AR62k_Vpg-Y6lJp8qmV3FF
"""

from collections import deque

class Graph:
    def __init__(self,):
      self.adj_list = {}

    def add_vertex(self, vertex):
      if vertex not in self.adj_list:
        self.adj_list[vertex] = []

    def add_edge(self, vertex1, vertex2):
       if vertex1 in self.adj_list and vertex2 in self.adj_list:
         self.adj_list[vertex1].append(vertex2)
         self.adj_list[vertex2].append(vertex1)

    def bfs(self, start_vertex):
       visited = set()
       traversal_order = []
       queue = deque()

       queue.append(start_vertex)
       visited.add(start_vertex)

       while queue:
         vertex = queue.popleft()
         traversal_order.append(vertex)

         for neighbor in self.adj_list[vertex]:
           if neighbor not in visited:
             queue.append(neighbor)
             visited.add(neighbor)

       return traversal_order

g = Graph()
g.add_vertex('A')
g.add_vertex('B')
g.add_vertex('C')
g.add_vertex('D')
g.add_vertex('E')

g.add_edge('A' , 'B')
g.add_edge('A' , 'C')
g.add_edge('B' , 'D')
g.add_edge('C' , 'E')

print(g.bfs('A'))